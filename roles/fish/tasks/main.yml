---
# tasks file for fish
# -- install fish
- name: install fish
  community.general.homebrew:
    name: fish
    state: latest
  when: ansible_facts['distribution'] == 'MacOSX'

- name: install fish
  community.general.pacman:
    name: fish
    state: latest
  when: ansible_facts['distribution'] == 'Archlinux'

# -- fish config
- name: link fish main config
  ansible.builtin.file:
    src: "{{ repo_path }}/dotfiles/fish/config_macosx.fish"
    dest: "{{ xdg.config }}/.config/fish/config.fish"
    state: link
  when: ansible_facts['distribution'] == 'MacOSX'

- name: link fish main config
  ansible.builtin.file:
    src: "{{ repo_path }}/dotfiles/fish/config_arch.fish"
    dest: "{{ xdg.config }}/fish/config.fish"
    state: link
  when: ansible_facts['distribution'] == 'Archlinux'

- name: link fish others config
  ansible.builtin.file:
    src: "{{ item }}"
    dest: "{{ xdg.config }}/fish/conf.d/{{ item | basename }}"
    state: link
  with_fileglob:
    - "{{ repo_path }}/dotfiles/fish/conf.d/*"

- name: link fish functions
  ansible.builtin.file:
    src: "{{ item }}"
    dest: "{{ xdg.config }}/fish/functions/{{ item | basename }}"
    state: link
  with_fileglob:
    - "{{ repo_path }}/dotfiles/fish/functions/*"

# -- install oh-my-fish
- name: download oh-my-fish installing script
  ansible.builtin.shell: curl -L https://get.oh-my.fish > /tmp/install_omf
  args:
    creates: "{{ xdg.data }}/omf"
  register: download_omf_result

- name: install oh-my-fish
  ansible.builtin.shell: "fish /tmp/install_fish --path={{ xdg.data }}/omf --config={{ xdg.config}}/omf"
  when: download_omf_result is defined and download_omf_result is succeeded

- name: update oh-my-fish
  ansible.builtin.shell: fish -c "omf update"
